import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
///////////////////////////////////////////////
task gitlib {
    doLast {
        println("dolast")
    }
}

project.afterEvaluate {
    println("afterEvaluate")
}
///////////////////////////////////////////
def checkStyleFile = rootProject.file("codestyle/wps_codestyle_checks.xml")
def reportHtmlFile = rootProject.file(project.rootProject.buildDir.path + "/wps-reports/checkstyle-result.html")
def deleteReportFiles(File htmlFile) {
    if (htmlFile != null && htmlFile.exists()) {
        return htmlFile.delete()
    }
    return false
}
def isGitlibCi() {
    return "gitlibCI" == System.getenv("BUILD_TAG")
}
def getGitCmdFiles(targetBranch, sourceBranch, diffFilter) {
    println("Target branch: $targetBranch")
    println("Source branch: $sourceBranch")

    List<String> files = new ArrayList<>()
    if (targetBranch == null || sourceBranch == null) {
        return files
    }

    def systemOutStream = new ByteArrayOutputStream()
    def command = "git diff --name-status --diff-filter=$diffFilter $targetBranch...$sourceBranch"
    command.execute().waitForProcessOutput(systemOutStream, System.err)
    def allFiles = systemOutStream.toString().trim().split('\n')
    systemOutStream.close()

    Pattern statusPattern = Pattern.compile("(\\w)\\t+(.+)")
    for (file in allFiles) {
        Matcher matcher = statusPattern.matcher(file)
        if (matcher.find()) {
            files.add(matcher.group(2))
        }
    }
    //println("diff branch-------- "+diffFilter+"->"+files)

    if (!isGitlibCi()) {
        def systemOutStreamLocal = new ByteArrayOutputStream()
        def commandLocal = "git status -s"
        commandLocal.execute().waitForProcessOutput(systemOutStreamLocal, System.err)
        def allLocalFiles = systemOutStreamLocal.toString().trim().split('\n')
        systemOutStreamLocal.close()
        Pattern statusPatternLocal = Pattern.compile("\\s?([\\?{2}MA])\\s+(.+)")
        for (file in allLocalFiles) {
            Matcher matcher = statusPatternLocal.matcher(file)
            if (matcher.find()) {
                def unTrackFile = matcher.group(2)
                if (!files.contains(unTrackFile)) {
                    files.add(unTrackFile)
                }
            }
        }
    }
    files
}
def getChangedFiles(diffFilter) {
    def targetBranch = project.getProperties().get("targetBranch")
    def sourceBranch = project.getProperties().get("sourceBranch")
    println "targetBranch--->" + targetBranch
    println "sourceBranch--->" + sourceBranch
    return getGitCmdFiles(targetBranch, sourceBranch, diffFilter)
}
def getFilterFiles(diffFilter) {
    def files = getChangedFiles(diffFilter)
    if (files.isEmpty()) {
        return files
    }

    List<String> filterFiles = new ArrayList<>()
    for (file in files) {
        if (file.endsWith(".java") || file.endsWith(".xml")) {
            filterFiles.add(file)
        }
    }

    //println("\nDiff need checkstyle filter "+diffFilter+"->"+filterFiles)
    return filterFiles
}
task checkstyleVcsNew(type: Checkstyle) {
    def changedFiles = getFilterFiles('A')
    if (changedFiles.isEmpty()) {
        source = files()
        enabled = false
        deleteReportFiles(reportHtmlFile)
        println("git status no new file to add, checkstyleVcsNew disable!")
    }
    include changedFiles

    doFirst {
        deleteReportFiles(reportHtmlFile)
    }

    doLast {
        if (!verifyResultValid(reportHtmlFile)) {
            def ret = deleteReportFiles(reportHtmlFile)
            println "verify result is invalid, delete report($ret)."
        }
    }
}

task abc {
    println "111"
    doLast {
        println "222"
        println "222"
        println "222"
    }
}
